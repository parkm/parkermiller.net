---
---

<div class="settings-container">
  <button id="settingsToggle" class="settings-toggle" aria-label="Toggle settings">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="3"></circle>
      <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
    </svg>
  </button>
  <div id="settingsMenu" class="settings-menu hidden">
    <h3>Game of Life Settings</h3>
    <div class="setting">
      <label for="cellSize">Cell Size:</label>
      <input type="range" id="cellSize" min="2" max="32" step="2" value="24">
      <span id="cellSizeValue">24</span>
    </div>
    <div class="setting">
      <label for="updateInterval">Update Interval (ms):</label>
      <input type="range" id="updateInterval" min="10" max="500" step="10" value="100">
      <span id="updateIntervalValue">100</span>
    </div>
    <div class="setting flex gap-2 items-center">
      <input type="checkbox" id="highPerformanceMode">
      <label for="highPerformanceMode" class="grow">
        High Performance Mode
      </label>
    </div>
  </div>
</div>

<style>
  .settings-container {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 40;
  }

  .settings-toggle {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
  }

  .settings-menu {
    position: absolute;
    top: 2rem;
    right: 0;
    background: rgba(0, 0, 0, 0.8);
    border-radius: 8px;
    padding: 1rem;
    color: white;
    min-width: 16rem;
  }

  .settings-menu h3 {
    margin-top: 0;
    margin-bottom: 1rem;
  }

  .setting {
    margin-bottom: 1rem;
  }

  .setting label {
    display: block;
    margin-bottom: 0.5rem;
  }

  .setting input:not([type="checkbox"]) {
    width: 100%;
  }

  .hidden {
    display: none;
  }
</style>

<script>
  const settingsToggle = document.getElementById('settingsToggle');
  const settingsMenu = document.getElementById('settingsMenu');
  const cellSizeInput = document.getElementById('cellSize') as HTMLInputElement;
  const cellSizeValue = document.getElementById('cellSizeValue');
  const updateIntervalInput = document.getElementById('updateInterval') as HTMLInputElement;
  const updateIntervalValue = document.getElementById('updateIntervalValue');
  const highPerformanceModeInput = document.getElementById('highPerformanceMode') as HTMLInputElement;

  settingsToggle?.addEventListener('click', () => {
    settingsMenu?.classList.toggle('hidden');
  });

  cellSizeInput?.addEventListener('input', (e) => {
    const value = (e.target as HTMLInputElement).value;
    cellSizeValue!.textContent = value;
    window.dispatchEvent(new CustomEvent('cellSizeChange', { detail: parseInt(value) }));
  });

  updateIntervalInput?.addEventListener('input', (e) => {
    const value = (e.target as HTMLInputElement).value;
    updateIntervalValue!.textContent = value;
    window.dispatchEvent(new CustomEvent('updateIntervalChange', { detail: parseInt(value) }));
  });

  highPerformanceModeInput?.addEventListener('change', (e) => {
    const isChecked = (e.target as HTMLInputElement).checked;
    window.dispatchEvent(new CustomEvent('highPerformanceModeChange', { detail: isChecked }));
  });
</script>
